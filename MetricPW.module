<?php

/**
 * ProcessWire Metric Marketing module
 * 
 * By Jonathan Dart
 * No Licence
 * 
 * http://metricmarketing.ca/blog/author/jonathan-dart
 *
 */
class MetricPW extends WireData implements Module 
{
	protected 
		$capturedJs = '',
		$layout = 'default',
		$templateVars = array(),
		$developmentTld = '.dev',
		$productionMode;

	public static function getModuleInfo() 
	{
		return array(
			'title' => 'MetricPW', 
			'version' => 001, 
			'summary' => 'Some tools used by metric marketing.',
			'href' => 'https://github.com/jdart/MetricPW',
			'singular' => true, 
			'autoload' => true, 
		);
	}

	public function ___install()
	{
		$layout_dir = $this->config->paths->templates.'layout';

		if (!is_dir($layout))
			mkdir($layout_dir);

		$base_file = $this->config->paths->templates.'layout/base.php';

		if (!is_file($base_file))
			copy(__DIR__.'/example-site/layout/base.php', $base_file);

		$default_file = $this->config->paths->templates.'layout/default.php';

		if (!is_file($default_file))
			copy(__DIR__.'/example-site/layout/default.php', $default_file);

		$asset_file = $this->config->paths->templates.'_assets.php';

		if (!is_file($asset_file))
			copy(__DIR__.'/example-site/_assets.php', $asset_file);

		$init_file = $this->config->paths->templates.'_init.php';

		if (!is_file($init_file))
			copy(__DIR__.'/example-site/_init.php', $init_file);
	}

	public function init() 
	{
		$this->addHookBefore('TemplateFile::render', $this, 'templateFileBeforeRender');

		$this->addHookBefore('Page::render', $this, 'pageBeforeRender');

		$this->addHookAfter('Page::render', $this, 'pageAfterRender'); 
	}

	public function templateFileBeforeRender($event)
	{
		foreach ($this->getTemplateVars() as $key => $value)
			$event->object->setGlobal($key, $value);
	}

	public function pageIsAdmin($page)
	{
		return $page->rootParent->id == $this->config->adminRootPageID;
	}

	public function pageBeforeRender($event)
	{
		// Make sure this page isn't an admin page
		if ($this->pageIsAdmin($event->object))
			return;

		extract($this->getTemplateVars());

		$init_file = $this->config->paths->templates . '_init.php';

		if (is_file($init_file))		
			require_once $init_file;

		$asset_file = $this->config->paths->templates . '_assets.php';

		if (is_file($asset_file))		
			require_once $asset_file;
	}

	public function pageAfterRender($event)
	{
		// Make sure this page isn't an admin page
		if ($this->pageIsAdmin($event->object))
			return;

		if (!$this->layout)
			return;

		$template_output = $event->return;

		extract($this->getTemplateVars());
		
		// wrap page output in layout
		ob_start();
		require $config->paths->templates.'layout/'.$this->layout.'.php';
		$layout_body = ob_get_clean();

		// wrap layout output with base layout (head and assets stuff)
		ob_start();
		require $config->paths->templates.'layout/base.php';
		$event->return = ob_get_clean();
	}

	public function setLayout($layout)
	{
		$this->layout = $layout;
	}

	public function getLayout()
	{
		return $this->layout;
	}

	public function addTemplateVar($key, $value)
	{
		$this->templateVars[$key] = $value;
	}

	public function getTemplateVars()
	{
		return array_merge(
			fuel()->getArray(), 
			array('metric' => $this),
			$this->templateVars
		);
	}

	public function setDevelopmentTld($tld)
	{
		$this->developmentTld = $tld;
	}

	public function setProductionMode($bool)
	{
		$this->productionMode = $bool;
	}

	public function isProductionMode()
	{
		if (isset($this->productionMode))
			return $this->productionMode;

		return strpos($this->config->httpHost, $this->developmentTld) === false;
	}

	public function includeHeadJavascripts()
	{
		$config = $this->config;

		$this->includeJavascripts(array(
			'modernizr.js',
			'jquery.js',
		), $config->urls->siteModules.'MetricPW/lib/');
	}

	public function addJavascript($input, $root=null) 
	{
		if (!is_array($input))
			$input = array($input);

		if (is_null($root))
			$root = $this->config->urls->templates;

		foreach ($input as $js)
			$this->config->scripts->add($root.$js);
	}

	public function includeJavascripts(array $javascripts=null, $root=null)
	{
		$config = $this->config;

		if (is_null($javascripts))
			$javascripts = $this->config->scripts->getIterator()->getArrayCopy();

		if (!is_null($root))
			foreach ($javascripts as &$js)
				$js = $root.$js;

		if ($this->isProductionMode()) {

			?>
			<script 
				type="text/javascript" 
				src="<?php 
					echo
						$this->config->urls->siteModules,
						'Minify/min',
						'?f=',
						implode(',', $javascripts)
				?>"
			></script>
			<?php

		} else {

			foreach ($javascripts as $javascript): ?>
				<script type="text/javascript" src="<?php echo $javascript ?>"></script>
			<?php endforeach;
		}
	}

	public function addStylesheet($input, $root=null) 
	{
		if (!is_array($input))
			$input = array($input);

		if (is_null($root))
			$root = $this->config->urls->templates;
		
		foreach ($input as $css)
			$this->config->styles->add($root.$css);
	}

	/**
	 * Converts a .less file into a .css file
	 *
	 * foo/bar.less would become foo/~bar.css
	 *
	 * @return string The path to the new .css file.
	 */
	public function compileStylesheet($stylesheet)
	{
		$sheetInfo = pathinfo($stylesheet);

		if ($sheetInfo['extension'] != 'less')
			return $stylesheet;

		$new_relative_path = $sheetInfo['dirname'] . '/~' . $sheetInfo['filename'] . '.css';

		try {
			$this->getLessc()
				->checkedCompile(
					$this->config->paths->root . trim($stylesheet, '/'), 
					$this->config->paths->root . trim($new_relative_path, '/')
				);						
		} catch (Exception $e) {
			echo "fatal error: " . $e->getMessage();
		}

		return $new_relative_path;
	}

	public function includeStylesheets(array $stylesheets=null)
	{
		if (is_null($stylesheets))
			$stylesheets = $this->config->styles->getIterator()->getArrayCopy();

		if ($this->isProductionMode()) {

			foreach ($stylesheets as &$stylesheet)
				$stylesheet = $this->compileStylesheet($stylesheet);

			?>
			<link 
				href="<?php
					echo 
						$this->config->urls->siteModules, 
						'Minify/min', 
						'?f=', 
						implode(",", $stylesheets) 
				?>" 
				rel="stylesheet" 
				type="text/css" 
			/>
			<?php

		} else {

			foreach ($stylesheets as $stylesheet): ?>
				<link rel="stylesheet/less" media="screen" href="<?php echo $stylesheet ?>">
			<?php endforeach ?>

			<script type="text/javascript">
				window.less = { env: "development" };
			</script>	

			<script type="text/javascript" src="<?php echo $this->config->urls->siteModules ?>MetricPW/lib/less.js"></script>
			<?php
		}
	}

	public function getLessc()
	{
		require_once __DIR__.'/lib/lessphp/lessc.inc.php';

		return new lessc;
	}

	public function includeDocumentReadyJavascript()
	{
		?>
		<script type="text/javascript">
			jQuery(function(){
				<?php echo $this->capturedJs ?>
			});
		</script>
		<?php
	}

	public function docReady()
	{
		$this->documentReadyJavascript();
	}

	public function documentReadyJavascript()
	{
		static $captureStarted = false;

		if (empty($captureStarted)) { 
			$captureStarted = true;
			ob_start();
			return;
		}

		$this->capturedJs .= ';' . str_replace(
			array('<script>', '<script type="text/javascript">', '</script>'), 
			'', 
			ob_get_clean()
		);

		$captureStarted = false;
	}

	public function block($name)
	{
		$path = sprintf('%s_%s.php', $this->config->paths->templates, $name);

		extract($this->getTemplateVars());

		if (is_file($path))
			require $path;
	}
}
